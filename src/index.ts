import {
  aws_ses as ses,
  aws_logs as logs,
  RemovalPolicy,
  Stack,
  aws_events as events,
  aws_events_targets as targets,
} from "aws-cdk-lib";
import { Construct } from "constructs";

/**
 * Properties for `SesCloudWatch`.
 */
export interface SesCloudWatchProps {
  /**
   * (Optional) Explicit name for the CloudWatch LogGroup that will receive
   * the SES event logs. If omitted, the LogGroup name will be automatically
   * generated by CloudFormation.
   */
  readonly logGroupName?: string;

  /**
   * (Optional) Explicit name for the SES Configuration Set. If not provided
   * a name will be derived using the pattern:
   * `${Stack.of(this).stackName}-ses-config-set`.
   */
  readonly configurationSetName?: string;

  /**
   * (Optional) Explicit name for the EventBridge Rule that captures SES events.
   * If not provided a name will be derived using the pattern:
   * `${Stack.of(this).stackName}-ses-event-rule`.
   */
  readonly eventRuleName?: string;

  /**
   * (Optional) The events to capture from SES. Defaults to SEND.
   */
  readonly events?: ses.EmailSendingEvent[];
}

/**
 * A construct that wires Amazon SES sending events into CloudWatch Logs via
 * EventBridge. It creates:
 *  - A CloudWatch LogGroup (optionally named) to store SES event logs
 *  - An SES Configuration Set (optionally named)
 *  - An EventBridge Rule that matches all SES events
 *  - A Configuration Set Event Destination that routes SEND events to the
 *    default EventBridge bus so they are captured by the rule and forwarded
 *    to the LogGroup.
 */
export class SesCloudWatch extends Construct {
  /** The CloudWatch LogGroup used to store SES event data. */
  public readonly logGroup: logs.LogGroup;
  /** The SES Configuration Set whose events are being published. */
  public readonly configurationSet: ses.ConfigurationSet;
  /** The EventBridge Rule that captures SES events. */
  public readonly eventRule: events.Rule;

  constructor(scope: Construct, id: string, props: SesCloudWatchProps = {}) {
    super(scope, id);

    // CloudWatch LogGroup to receive SES events. Name is optional.
    this.logGroup = new logs.LogGroup(this, "SesEmailLogGroup", {
      logGroupName: props.logGroupName,
      removalPolicy: RemovalPolicy.DESTROY,
    });

    // SES Configuration Set with optional custom name.
    this.configurationSet = new ses.ConfigurationSet(
      this,
      "SesConfigurationSet",
      {
        configurationSetName:
          props.configurationSetName ||
          `${Stack.of(this).stackName}-ses-config-set`,
      }
    );

    // EventBridge rule to match SES events published for this configuration set
    // EventBridge rule to match all SES events (source = aws.ses).
    this.eventRule = new events.Rule(this, "SesEventRule", {
      eventPattern: {
        source: ["aws.ses"],
        resources: [
          "arn:aws:ses:*:*:configuration-set/" +
            this.configurationSet.configurationSetName,
        ],
      },
    });

    // EventBridge target for SES events
    this.eventRule.addTarget(new targets.CloudWatchLogGroup(this.logGroup));

    // Send the configuration set events to the resolved event bus
    this.configurationSet.addEventDestination("SesEventDestination", {
      destination: ses.EventDestination.eventBus(
        events.EventBus.fromEventBusName(
          this,
          props.eventRuleName ?? "DefaultEventBus",
          "default"
        )
      ),
      events: props.events ?? [ses.EmailSendingEvent.SEND],
    });
  }
}
